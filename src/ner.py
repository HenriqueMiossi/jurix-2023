import spacy
import json
import codecs

# Load model
nlp = spacy.load('models/juridic')

# Exemplo de uso do modelo
text = text = """PEDIDO DE UNIFORMIZAÇÃO. DIREITO PREVIDENCIÁRIO E DIREITO PROCESSUAL CIVIL. RESTABELECIMENTO DE AUXÍLIO-SUPLEMENTAR POR ACIDENTE DE TRABALHO. CESSAÇÃO ADMINISTRATIVA COM BASE NA ACUMULAÇÃO COM APOSENTADORIA POR TEMPO DE CONTRIBUIÇÃO. COBRANÇA DOS\nRESPECTIVOS VALORES. APOSENTAÇÃO OCORRIDA ANTES DA EDIÇÃO DA MP1.596-14/1997, CONVERTIDA NA LEI 9.528/1997. SENTENÇA DE PARCIAL PROCEDÊNCIA, DETERMINANDO SOMENTE A INEXIGIBILIDADE DA DEVOLUÇÃO, MANTIDA PELA TURMA DE ORIGEM PORQUE NÃO APRESENTADO\nRECURSO\nINOMINADO PELA PARTE AUTORA. TRÂNSITO EM JULGADO, BAIXA DOS AUTOS AO JUIZADO E ARQUIVAMENTO. PROLAÇÃO DE SEGUNDA SENTENÇA PARA DESCONSTITUIR OS ATOS DECISÓRIOS ANTERIORES E DEFERIR O RESTABELECIMENTO DO BENEFÍCIO. ACÓRDÃO QUE ANULA A SENTENÇA POSTERIOR\nCOM FUNDAMENTO NA PRECLUSÃO E NA COISA JULGADA MATERIAL. PRETENSÃO DO RECORRENTE DE ANULAR A PRIMEIRA SENTENÇA POR VÍCIO DE CONTRADIÇÃO E MANTER A SEGUNDA SENTENÇA. QUESTÕES DE NÍTIDO CARÁTER PROCESSUAL. SÚMULA 43 DA TNU. PRECEDENTES DA TNU. AUSÊNCIA\nDE\nSIMILITUDE FÁTICO-JURÍDICA COM PRECEDENTES DA TNU QUE ANULARAM ACÓRDÃOS POR GRAVES DEFICIÊNCIAS DE FUNDAMENTAÇÃO. CASO CONCRETO COM DECISÕES BEM FUNDAMENTADAS. QUESTÃO DE ORDEM 22 DA TNU. VÍCIO DE CONTRADIÇÃO QUE SE SUJEITA À PRECLUSÃO E NÃO\nCARACTERIZA\nNULIDADE ABSOLUTA, PASSÍVEL DE CORREÇÃO POR EMBARGOS DE DECLARAÇÃO OU RECURSO INOMINADO, NÃO APRESENTADOS OPORTUNAMENTE PELA PARTE INTERESSADA. INEXISTÊNCIA DE NULIDADE A SER DECRETADA PELA TNU, INCLUSIVE QUANTO ÀS INTIMAÇÕES DA DPU. IMPOSSIBILIDADE DE\nRECONHECIMENTO DE NULIDADE EM RAZÃO DA COISA JULGADA. PRECEDENTE DO STJ. ALEGAÇÃO DE CONTRARIEDADE ÀS TESES FIRMADAS NOS TEMAS 555 E 556 DO STJ. RAZÕES DISSOCIADAS. INCIDENTE DA PARTE AUTORA NÃO CONHECIDO.\n"""
doc = nlp(text)

output = {
    "source": text,
    "items": []
}

for ent in doc.ents:
    output["items"].append({
        "selected-text": ent.text,
        "start": ent.start,
        "end": ent.end,
        "type": ent.label_
    })

file = codecs.open("./out.json", "w", "utf-8")
file.write(json.dumps(output, indent = 4, ensure_ascii = False))
file.close()
